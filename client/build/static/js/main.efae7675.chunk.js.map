{"version":3,"sources":["utils/auth.js","utils/mutations.js","utils/localStorage.js","pages/SearchBooks.js","utils/API.js","utils/queries.js","pages/SavedBooks.js","components/SignupForm.js","components/LoginForm.js","components/Navbar.js","App.js","index.js"],"names":["decode","this","getToken","token","isTokenExpired","exp","Date","now","err","localStorage","getItem","idToken","setItem","window","location","assign","removeItem","LOGIN_USER","gql","ADD_USER","SAVE_BOOK","DELETE_BOOK","removeBookId","bookId","savedBookIds","JSON","parse","updatedSavedBookIds","filter","savedBookId","stringify","SearchBooks","useState","searchedBooks","setSearchedBooks","searchInput","setSearchInput","setSavedBookIds","useMutation","addBook","error","data","useEffect","bookIdArr","length","handleFormSubmit","event","a","preventDefault","fetch","response","ok","Error","json","items","bookData","map","book","id","authors","volumeInfo","title","description","image","imageLinks","thumbnail","console","handleSaveBook","bookToSave","find","Auth","loggedIn","variables","Jumbotron","fluid","className","Container","Form","onSubmit","Row","Col","xs","md","Control","name","value","onChange","e","target","type","size","placeholder","Button","variant","CardColumns","Card","key","border","Img","src","alt","Body","Title","Text","disabled","some","onClick","QUERY_ME","SavedBooks","deleteBook","deleteInfo","useQuery","loading","userData","user","log","username","handleDeleteBook","newUserData","savedBooks","SignupForm","email","password","userFormData","setUserFormData","validated","showAlert","setShowAlert","handleInputChange","newUser","currentTarget","checkValidity","stopPropagation","createUser","login","noValidate","Alert","dismissible","onClose","show","Group","Label","htmlFor","required","Feedback","LoginForm","AppNavbar","showModal","setShowModal","Navbar","bg","expand","Brand","as","Link","to","Toggle","aria-controls","Collapse","Nav","logout","Modal","onHide","aria-labelledby","Tab","defaultActiveKey","Header","closeButton","Item","eventKey","Content","Pane","handleModalClose","httpLink","createHttpLink","uri","authLink","setContext","_","headers","authorization","client","ApolloClient","link","concat","cache","InMemoryCache","App","ApolloProvider","exact","path","component","render","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.efae7675.chunk.js","sourcesContent":["// use this to decode a token and get the user's information out of it\nimport decode from 'jwt-decode';\n\n// create a new class to instantiate for a user\nclass AuthService {\n  // get user data\n  getProfile() {\n    return decode(this.getToken());\n  }\n\n  // check if user's logged in\n  loggedIn() {\n    // Checks if there is a saved token and it's still valid\n    const token = this.getToken();\n    return !!token && !this.isTokenExpired(token); // handwaiving here\n  }\n\n  // check if token is expired\n  isTokenExpired(token) {\n    try {\n      const decoded = decode(token);\n      if (decoded.exp < Date.now() / 1000) {\n        return true;\n      } else return false;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  getToken() {\n    // Retrieves the user token from localStorage\n    return localStorage.getItem('id_token');\n  }\n\n  login(idToken) {\n    // Saves user token to localStorage\n    localStorage.setItem('id_token', idToken);\n    window.location.assign('/');\n  }\n\n  logout() {\n    // Clear user token and profile data from localStorage\n    localStorage.removeItem('id_token');\n    // this will reload the page and reset the state of the application\n    window.location.assign('/');\n  }\n}\n\nexport default new AuthService();\n","import { gql } from '@apollo/client';\r\n\r\nexport const LOGIN_USER = gql`\r\n  mutation login($email: String!, $password: String!) {\r\n    login(email: $email, password: $password) {\r\n      token\r\n      user {\r\n        _id\r\n        username\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const ADD_USER = gql`\r\n  mutation createUser($username: String!, $email: String!, $password: String!) {\r\n    createUser(username: $username, email: $email, password: $password) {\r\n      token\r\n      user {\r\n        _id\r\n        username\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const SAVE_BOOK = gql`\r\n  mutation saveBook($book: BookToSave!) {\r\n    saveBook(book: $book) {\r\n            _id\r\n            username\r\n            email\r\n            savedBooks {\r\n              _id\r\n              authors\r\n              description\r\n              bookId\r\n              image\r\n              link\r\n              title\r\n            }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const DELETE_BOOK = gql`\r\n  mutation deleteBook($bookId: String!) {\r\n      deleteBook(bookId: $bookId) {\r\n            _id\r\n            username\r\n            email\r\n            savedBooks {\r\n              _id\r\n              authors\r\n              description\r\n              bookId\r\n              image\r\n              link\r\n              title\r\n            }\r\n      }\r\n  }\r\n`;","export const getSavedBookIds = () => {\n  const savedBookIds = localStorage.getItem('saved_books')\n    ? JSON.parse(localStorage.getItem('saved_books'))\n    : [];\n\n  return savedBookIds;\n};\n\nexport const saveBookIds = (bookIdArr) => {\n  if (bookIdArr.length) {\n    localStorage.setItem('saved_books', JSON.stringify(bookIdArr));\n  } else {\n    localStorage.removeItem('saved_books');\n  }\n};\n\nexport const removeBookId = (bookId) => {\n  const savedBookIds = localStorage.getItem('saved_books')\n    ? JSON.parse(localStorage.getItem('saved_books'))\n    : null;\n\n  if (!savedBookIds) {\n    return false;\n  }\n\n  const updatedSavedBookIds = savedBookIds?.filter((savedBookId) => savedBookId !== bookId);\n  localStorage.setItem('saved_books', JSON.stringify(updatedSavedBookIds));\n\n  return true;\n};\n","import React, { useState, useEffect } from 'react';\nimport { Jumbotron, Container, Col, Form, Button, Card, CardColumns } from 'react-bootstrap';\nimport { useMutation } from '@apollo/client';\nimport Auth from '../utils/auth';\nimport { SAVE_BOOK } from '../utils/mutations';\nimport { saveBook, searchGoogleBooks } from '../utils/API';\nimport { saveBookIds, getSavedBookIds } from '../utils/localStorage';\n\nconst SearchBooks = () => {\n  // create state for holding returned google api data\n  const [searchedBooks, setSearchedBooks] = useState([]);\n  // create state for holding our search field data\n  const [searchInput, setSearchInput] = useState('');\n\n  // create state to hold saved bookId values\n  const [savedBookIds, setSavedBookIds] = useState(getSavedBookIds());\n\n  //declare mutation to save book to database\n  const [addBook, {error, data}] = useMutation(SAVE_BOOK);\n\n  // set up useEffect hook to save `savedBookIds` list to localStorage on component unmount\n  // learn more here: https://reactjs.org/docs/hooks-effect.html#effects-with-cleanup\n  useEffect(() => {\n    return () => saveBookIds(savedBookIds);\n  });\n\n  // create method to search for books and set state on form submit\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    if (!searchInput) {\n      return false;\n    }\n\n    try {\n      const response = await searchGoogleBooks(searchInput);\n\n      if (!response.ok) {\n        throw new Error('something went wrong!');\n      }\n\n      const { items } = await response.json();\n\n      const bookData = items.map((book) => ({\n        bookId: book.id,\n        authors: book.volumeInfo.authors || ['No author to display'],\n        title: book.volumeInfo.title,\n        description: book.volumeInfo.description,\n        image: book.volumeInfo.imageLinks?.thumbnail || '',\n      }));\n\n      setSearchedBooks(bookData);\n      setSearchInput('');\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  // create function to handle saving a book to our database\n  const handleSaveBook = async (bookId) => {\n    // find the book in `searchedBooks` state by the matching id\n    const bookToSave = searchedBooks.find((book) => book.bookId === bookId);\n\n    // get token\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\n\n    if (!token) {\n      return false;\n    }\n\n    try {\n\n      const {data} = await addBook({\n        variables: { book: bookToSave }\n      });\n\n      // const response = await saveBook(bookToSave, token);\n\n      // if (!response.ok) {\n      //   throw new Error('something went wrong!');\n      // }\n\n      // if book successfully saves to user's account, save book id to state\n      setSavedBookIds([...savedBookIds, bookToSave.bookId]);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  return (\n    <>\n      <Jumbotron fluid className='text-light bg-dark'>\n        <Container>\n          <h1>Search for Books!</h1>\n          <Form onSubmit={handleFormSubmit}>\n            <Form.Row>\n              <Col xs={12} md={8}>\n                <Form.Control\n                  name='searchInput'\n                  value={searchInput}\n                  onChange={(e) => setSearchInput(e.target.value)}\n                  type='text'\n                  size='lg'\n                  placeholder='Search for a book'\n                />\n              </Col>\n              <Col xs={12} md={4}>\n                <Button type='submit' variant='success' size='lg'>\n                  Submit Search\n                </Button>\n              </Col>\n            </Form.Row>\n          </Form>\n        </Container>\n      </Jumbotron>\n\n      <Container>\n        <h2>\n          {searchedBooks.length\n            ? `Viewing ${searchedBooks.length} results:`\n            : 'Search for a book to begin'}\n        </h2>\n        <CardColumns>\n          {searchedBooks.map((book) => {\n            return (\n              <Card key={book.bookId} border='dark'>\n                {book.image ? (\n                  <Card.Img src={book.image} alt={`The cover for ${book.title}`} variant='top' />\n                ) : null}\n                <Card.Body>\n                  <Card.Title>{book.title}</Card.Title>\n                  <p className='small'>Authors: {book.authors}</p>\n                  <Card.Text>{book.description}</Card.Text>\n                  {Auth.loggedIn() && (\n                    <Button\n                      disabled={savedBookIds?.some((savedBookId) => savedBookId === book.bookId)}\n                      className='btn-block btn-info'\n                      onClick={() => handleSaveBook(book.bookId)}>\n                      {savedBookIds?.some((savedBookId) => savedBookId === book.bookId)\n                        ? 'This book has already been saved!'\n                        : 'Save this Book!'}\n                    </Button>\n                  )}\n                </Card.Body>\n              </Card>\n            );\n          })}\n        </CardColumns>\n      </Container>\n    </>\n  );\n};\n\nexport default SearchBooks;\n","// route to get logged in user's info (needs the token)\nexport const getMe = (token) => {\n  return fetch('/api/users/me', {\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Bearer ${token}`,\n    },\n  });\n};\n\nexport const createUser = (userData) => {\n  return fetch('/api/users', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(userData),\n  });\n};\n\nexport const loginUser = (userData) => {\n  return fetch('/api/users/login', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(userData),\n  });\n};\n\n// save book data for a logged in user\nexport const saveBook = (bookData, token) => {\n  return fetch('/api/users', {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Bearer ${token}`,\n    },\n    body: JSON.stringify(bookData),\n  });\n};\n\n// remove saved book data for a logged in user\nexport const deleteBook = (bookId, token) => {\n  return fetch(`/api/users/books/${bookId}`, {\n    method: 'DELETE',\n    headers: {\n      authorization: `Bearer ${token}`,\n    },\n  });\n};\n\n// make a search to google books api\n// https://www.googleapis.com/books/v1/volumes?q=harry+potter\nexport const searchGoogleBooks = (query) => {\n  return fetch(`https://www.googleapis.com/books/v1/volumes?q=${query}`);\n};\n","import { gql } from '@apollo/client';\r\n\r\nexport const QUERY_ME = gql`\r\n  query user {\r\n    user {\r\n      _id\r\n      username\r\n      email\r\n      savedBooks {\r\n        _id\r\n        authors\r\n        description\r\n        bookId\r\n        image\r\n        link\r\n        title\r\n      }\r\n    }\r\n  }\r\n`;","import React, { useState, useEffect } from 'react';\nimport { Jumbotron, Container, CardColumns, Card, Button } from 'react-bootstrap';\nimport { useQuery, useMutation } from '@apollo/client';\nimport { QUERY_ME } from '../utils/queries';\nimport { DELETE_BOOK } from '../utils/mutations';\nimport { getMe, deleteBook } from '../utils/API';\nimport Auth from '../utils/auth';\nimport { removeBookId } from '../utils/localStorage';\n\nconst SavedBooks = () => {\n  //const [userData, setUserData] = useState({});\n\n  //set mutation for deleting a book\n  const [deleteBook, { error, deleteInfo }] = useMutation(DELETE_BOOK);\n\n  const { loading, data } = useQuery(QUERY_ME);\n\n  const userData = data?.user || {};\n\n  console.log(userData);\n\n  if (loading) {\n    return <h2>Loading...</h2>;\n  }\n\n  if (!userData?.username) {\n    return (\n      <h4>\n        You need to be logged in to see this. Use the navigation links above to\n        sign up or log in!\n      </h4>\n    );\n  }\n\n  // use this to determine if `useEffect()` hook needs to run again\n  /* const userDataLength = Object.keys(userData).length;\n\n  useEffect(() => {\n    const getUserData = async () => {\n      try {\n        const token = Auth.loggedIn() ? Auth.getToken() : null;\n\n        if (!token) {\n          return false;\n        }\n\n        const response = await getMe(token);\n\n        if (!response.ok) {\n          throw new Error('something went wrong!');\n        }\n\n        const user = await response.json();\n        \n        setUserData(user);\n      } catch (err) {\n        console.error(err);\n      }\n    };\n\n    getUserData();\n  }, [userDataLength]); */\n\n  // create function that accepts the book's mongo _id value as param and deletes the book from the database\n  const handleDeleteBook = async (bookId) => {\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\n\n    if (!token) {\n      return false;\n    }\n\n    try {\n\n      const { newUserData } = await deleteBook({\n        variables: { bookId }\n      });\n\n      // const response = await deleteBook(bookId, token);\n\n      // if (!response.ok) {\n      //   throw new Error('something went wrong!');\n      // }\n\n      // const updatedUser = await response.json();\n      //setUserData(updatedUser);\n      // upon success, remove book's id from localStorage\n      removeBookId(bookId);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  // if data isn't here yet, say so\n  /* if (!userDataLength) {\n    return <h2>LOADING...</h2>;\n  } */\n\n  return (\n    <>\n      <Jumbotron fluid className='text-light bg-dark'>\n        <Container>\n          <h1>Viewing saved books!</h1>\n        </Container>\n      </Jumbotron>\n      <Container>\n        <h2>\n          {userData.savedBooks.length\n            ? `Viewing ${userData.savedBooks.length} saved ${userData.savedBooks.length === 1 ? 'book' : 'books'}:`\n            : 'You have no saved books!'}\n        </h2>\n        <CardColumns>\n          {userData.savedBooks.map((book) => {\n            return (\n              <Card key={book.bookId} border='dark'>\n                {book.image ? <Card.Img src={book.image} alt={`The cover for ${book.title}`} variant='top' /> : null}\n                <Card.Body>\n                  <Card.Title>{book.title}</Card.Title>\n                  <p className='small'>Authors: {book.authors}</p>\n                  <Card.Text>{book.description}</Card.Text>\n                  <Button className='btn-block btn-danger' onClick={() => handleDeleteBook(book.bookId)}>\n                    Delete this Book!\n                  </Button>\n                </Card.Body>\n              </Card>\n            );\n          })}\n        </CardColumns>\n      </Container>\n    </>\n  );\n};\n\nexport default SavedBooks;\n","import React, { useState } from 'react';\nimport { Form, Button, Alert } from 'react-bootstrap';\nimport { useMutation } from '@apollo/client';\n//import { createUser } from '../utils/API';\nimport { ADD_USER } from '../utils/mutations';\nimport Auth from '../utils/auth';\n\nconst SignupForm = () => {\n  // set initial form state\n  const [userFormData, setUserFormData] = useState({ username: '', email: '', password: '' });\n  // set state for form validation\n  const [validated] = useState(false);\n  // set state for alert\n  const [showAlert, setShowAlert] = useState(false);\n\n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n    setUserFormData({ ...userFormData, [name]: value });\n  };\n\n  const [newUser, { error, data }] = useMutation(ADD_USER);\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    // check if form has everything (as per react-bootstrap docs)\n    const form = event.currentTarget;\n    if (form.checkValidity() === false) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    try {\n\n      const { data } = await newUser({\n        variables: { ...userFormData }\n      });\n      // const response = await createUser(userFormData);\n\n      // if (!response.ok) {\n      //   throw new Error('something went wrong!');\n      // }\n\n      // const { token, user } = await response.json();\n      console.log(data.createUser.user);\n      Auth.login(data.createUser.token);\n    } catch (err) {\n      console.error(err);\n      setShowAlert(true);\n    }\n\n    setUserFormData({\n      username: '',\n      email: '',\n      password: '',\n    });\n  };\n\n  return (\n    <>\n      {/* This is needed for the validation functionality above */}\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\n        {/* show alert if server response is bad */}\n        <Alert dismissible onClose={() => setShowAlert(false)} show={showAlert} variant='danger'>\n          Something went wrong with your signup!\n        </Alert>\n\n        <Form.Group>\n          <Form.Label htmlFor='username'>Username</Form.Label>\n          <Form.Control\n            type='text'\n            placeholder='Your username'\n            name='username'\n            onChange={handleInputChange}\n            value={userFormData.username}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Username is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='email'>Email</Form.Label>\n          <Form.Control\n            type='email'\n            placeholder='Your email address'\n            name='email'\n            onChange={handleInputChange}\n            value={userFormData.email}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Email is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='password'>Password</Form.Label>\n          <Form.Control\n            type='password'\n            placeholder='Your password'\n            name='password'\n            onChange={handleInputChange}\n            value={userFormData.password}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Password is required!</Form.Control.Feedback>\n        </Form.Group>\n        <Button\n          disabled={!(userFormData.username && userFormData.email && userFormData.password)}\n          type='submit'\n          variant='success'>\n          Submit\n        </Button>\n      </Form>\n    </>\n  );\n};\n\nexport default SignupForm;\n","// see SignupForm.js for comments\nimport React, { useState } from 'react';\nimport { Form, Button, Alert } from 'react-bootstrap';\nimport { useMutation } from '@apollo/client';\nimport { LOGIN_USER } from '../utils/mutations';\n//import { loginUser } from '../utils/API';\nimport Auth from '../utils/auth';\n\nconst LoginForm = () => {\n  const [userFormData, setUserFormData] = useState({ email: '', password: '' });\n  const [validated] = useState(false);\n  const [showAlert, setShowAlert] = useState(false);\n\n  \n\n  const [login, { error, data }] = useMutation(LOGIN_USER);\n\n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n    setUserFormData({ ...userFormData, [name]: value });\n  };\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    // check if form has everything (as per react-bootstrap docs)\n    const form = event.currentTarget;\n    if (form.checkValidity() === false) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    try {\n      //const response = await loginUser(userFormData);\n\n      // if (!response.ok) {\n      //   throw new Error('something went wrong!');\n      // }\n\n      const { data } = await login({\n        variables: { ...userFormData}\n      });\n\n      //const { token, user } = await response.json();\n      console.log(data.login.user);\n      Auth.login(data.login.token);\n    } catch (err) {\n      console.error(err);\n      setShowAlert(true);\n    }\n\n    setUserFormData({\n      username: '',\n      email: '',\n      password: '',\n    });\n  };\n\n  return (\n    <>\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\n        <Alert dismissible onClose={() => setShowAlert(false)} show={showAlert} variant='danger'>\n          Something went wrong with your login credentials!\n        </Alert>\n        <Form.Group>\n          <Form.Label htmlFor='email'>Email</Form.Label>\n          <Form.Control\n            type='text'\n            placeholder='Your email'\n            name='email'\n            onChange={handleInputChange}\n            value={userFormData.email}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Email is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='password'>Password</Form.Label>\n          <Form.Control\n            type='password'\n            placeholder='Your password'\n            name='password'\n            onChange={handleInputChange}\n            value={userFormData.password}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Password is required!</Form.Control.Feedback>\n        </Form.Group>\n        <Button\n          disabled={!(userFormData.email && userFormData.password)}\n          type='submit'\n          variant='success'>\n          Submit\n        </Button>\n      </Form>\n    </>\n  );\n};\n\nexport default LoginForm;\n","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Navbar, Nav, Container, Modal, Tab } from 'react-bootstrap';\nimport SignUpForm from './SignupForm';\nimport LoginForm from './LoginForm';\n\nimport Auth from '../utils/auth';\n\nconst AppNavbar = () => {\n  // set modal display state\n  const [showModal, setShowModal] = useState(false);\n\n  return (\n    <>\n      <Navbar bg='dark' variant='dark' expand='lg'>\n        <Container fluid>\n          <Navbar.Brand as={Link} to='/'>\n            Google Books Search\n          </Navbar.Brand>\n          <Navbar.Toggle aria-controls='navbar' />\n          <Navbar.Collapse id='navbar'>\n            <Nav className='ml-auto'>\n              <Nav.Link as={Link} to='/'>\n                Search For Books\n              </Nav.Link>\n              {/* if user is logged in show saved books and logout */}\n              {Auth.loggedIn() ? (\n                <>\n                  <Nav.Link as={Link} to='/saved'>\n                    See Your Books\n                  </Nav.Link>\n                  <Nav.Link onClick={Auth.logout}>Logout</Nav.Link>\n                </>\n              ) : (\n                <Nav.Link onClick={() => setShowModal(true)}>Login/Sign Up</Nav.Link>\n              )}\n            </Nav>\n          </Navbar.Collapse>\n        </Container>\n      </Navbar>\n      {/* set modal data up */}\n      <Modal\n        size='lg'\n        show={showModal}\n        onHide={() => setShowModal(false)}\n        aria-labelledby='signup-modal'>\n        {/* tab container to do either signup or login component */}\n        <Tab.Container defaultActiveKey='login'>\n          <Modal.Header closeButton>\n            <Modal.Title id='signup-modal'>\n              <Nav variant='pills'>\n                <Nav.Item>\n                  <Nav.Link eventKey='login'>Login</Nav.Link>\n                </Nav.Item>\n                <Nav.Item>\n                  <Nav.Link eventKey='signup'>Sign Up</Nav.Link>\n                </Nav.Item>\n              </Nav>\n            </Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            <Tab.Content>\n              <Tab.Pane eventKey='login'>\n                <LoginForm handleModalClose={() => setShowModal(false)} />\n              </Tab.Pane>\n              <Tab.Pane eventKey='signup'>\n                <SignUpForm handleModalClose={() => setShowModal(false)} />\n              </Tab.Pane>\n            </Tab.Content>\n          </Modal.Body>\n        </Tab.Container>\n      </Modal>\n    </>\n  );\n};\n\nexport default AppNavbar;\n","import React from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n  createHttpLink,\n} from '@apollo/client';\nimport { setContext } from '@apollo/client/link/context';\nimport SearchBooks from './pages/SearchBooks';\nimport SavedBooks from './pages/SavedBooks';\nimport Navbar from './components/Navbar';\n\n// Construct our main GraphQL API endpoint\nconst httpLink = createHttpLink({\n  uri: '/graphql',\n});\n\n// Construct request middleware that will attach the JWT token to every request as an `authorization` header\nconst authLink = setContext((_, { headers }) => {\n  // get the authentication token from local storage if it exists\n  const token = localStorage.getItem('id_token');\n  // return the headers to the context so httpLink can read them\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : '',\n    },\n  };\n});\n\nconst client = new ApolloClient({\n  // Set up our client to execute the `authLink` middleware prior to making the request to our GraphQL API\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache(),\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n      <>\n        <Navbar />\n        <Switch>\n          <Route exact path='/' component={SearchBooks} />\n          <Route exact path='/saved' component={SavedBooks} />\n          <Route render={() => <h1 className='display-2'>Wrong page!</h1>} />\n        </Switch>\n      </>\n    </Router>\n    </ApolloProvider>\n    \n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}